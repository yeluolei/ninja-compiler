 /**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg2)
package com.compiler
import java.io.ByteArrayInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.util.*;public class eg2{  static Map < String, Integer > record;  static int simpleStatCnt = 0;  private Map < String, Integer > tokenRecord;  private boolean LexicalState = true;  private String lexicalErrorMessage = "";  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    record = new HashMap < String, Integer > ();    try    {      File f = new File("E:\\study\\Programming\\java\\javacctest\\bin\\foo\\source.txt");      InputStream is = new FileInputStream(f);      new eg2(is);      SimpleNode n = eg2.Start();      n.dump("");      System.out.println("Thank you.");      for (String o : record.keySet())      {        System.out.println(o);        System.out.println(record.get(o));      }      System.out.println("Simple statement number:");      System.out.println(simpleStatCnt);    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }    catch (TokenMgrError e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }  public String LexicalAnalyse(File sourefile) throws TokenMgrError  {    String result = "";    tokenRecord = new HashMap < String, Integer > ();    token = token_source.getNextToken();    while ((token) != null)    {      if (token.kind != 0)      {        String tokenName = token_source.tokenImage [token.kind];        result += tokenName;        System.out.print(tokenName);        if ((token.kind > 22 && token.kind < 43 && token.kind != 41) || token.kind == 44)        {          if (tokenRecord.containsKey(token.image))          {            int temp = tokenRecord.get(token.image);            tokenRecord.put(token.image, temp + 1);          }          else           tokenRecord.put(token.image, 1);        }      }      else       break;      try      {        token = token_source.getNextToken();      }      catch (TokenMgrError e)      {        System.out.println(e.getMessage());        LexicalState = false;        lexicalErrorMessage = lexicalErrorMessage + e.getMessage()         + "\n";      }    }    token_source.ReInit(jj_input_stream);    return result;  }}PARSER_END(eg2)SKIP : /* WHITE SPACE */{  " "| "\t"| "\n"| "\r"| "\f"  {    System.out.println(image);  }}SPECIAL_TOKEN : /* COMMENTS */{  < SINGLE_LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < FORMAL_COMMENT :    "/**" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < LSQPAREN : "[" >| < RSQPAREN : "]" >| < LBRACE : "{" >| < RBRACE : "}" >| < SEMICOLON : ";" >| < DOT : "." >| < ASSIGN : "=" >| < LT : "<" >| < BT : ">" >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < AND : "&&" >| < OR : "||" >| < NOT : "!" >| < BOOLEAN : "boolean" >| < CLASS : "class" >| < LONG : "long" >| < INTERFACE : "interface" >| < ELSE : "else" >| < EXTENDS : "extends" >| < FALSE : "false" >| < IF : "if" >| < WHILE : "while" >| < INTEGER : "int" >| < LENGTH : "length" >| < MAIN : "main" >| < NEW : "new" >| < PUBLIC : "public" >| < RETURN : "return" >| < STATIC : "static" >| < STRING : "String" >| < THIS : "this" >| < TRUE : "true" >| < PRINT : "System.out.println" >| < VOID : "void" >  {    System.out.println(image);  }}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    (      [ "1"-"9" ] ([ "0"-"9" ])*    | "0"    ) >}TOKEN :{  < LONG_LITERAL :     (    < INTEGER_LITERAL > "L") >}TOKEN :{  < ERR_IDENTIFIER :    < DIGIT >    (      < DIGIT >    | < LETTER >    )* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >}/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/SimpleNode Start() :{}{  MainClass()  (    TypeDeclaration()  )*  < EOF >  {    return jjtThis;  }}void MainClass() :{}{  "class" Identifier() "{" "public" "static" "void" "main" "(" ")" "{" Statement() "}" "}"}void TypeDeclaration() :{}{  LOOKAHEAD(3)  ClassDeclaration()| ClassExtendsDeclaration()}void ClassDeclaration() :{}{  "class" Identifier() "{"  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  "}"}void ClassExtendsDeclaration() :{}{  "class" Identifier() "extends" Identifier() "{"  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  "}"}void MethodDeclaration() :{}{  "public" Type() Identifier() "("  (    FormalParameterList()  )?  ")" "{"   PreDecl()   PostDecl()  (    LOOKAHEAD(2)    VarDeclaration()  )*  (    Statement()  )*  "return" Expression() ";" "}"  {    simpleStatCnt++;  }}void PreDecl() :{}{  "pre:" Expression() ";"}void PostDecl() :{}{  "post:" Expression() ";"}void FormalParameterList() :{}{  FormalParameter()  (    FormalParameterRest()  )*}void FormalParameter() :{}{  Type() Identifier()}void FormalParameterRest() :{}{  "," FormalParameter()}void Type() :{}{  LOOKAHEAD(3)  ArrayType()|   LOOKAHEAD(3)  LongArrayType()| BooleanType()| IntegerType()| Identifier()|   LongType()}void ArrayType() :{}{  "int" "[" "]"}void LongArrayType() :{}{  "long" "[" "]"}void BooleanType() :{}{  "boolean"}void IntegerType() :{}{  "int"}void LongType() :{}{  "long"}void Statement() :{}{  LOOKAHEAD(2)  VarDeclaration()| Block()| LOOKAHEAD(2)  AssignmentStatement()  {    simpleStatCnt++;  }| LOOKAHEAD(2)  ArrayAssignmentStatement()  {    simpleStatCnt++;  }| IfStatement()| WhileStatement()| PrintStatement()}void VarDeclaration() :{}{  Type() Identifier() ";"}void Block() :{}{  "{"  (    Statement()  )*  "}"}void AssignmentStatement() :{}{  Identifier() "=" Expression() ";"}void ArrayAssignmentStatement() :{}{  Identifier() "[" Expression() "]" "=" Expression() ";"}void IfStatement() :{}{  "if" "(" Expression() ")" Statement() "else" Statement()}void WhileStatement() :{}{  "while" "(" Expression() ")" Statement()}void PrintStatement() :{}{  "System.out.println" "(" Expression() ")" ";"}void Expression() :{}{  AndExpression()  (    "||" AndExpression()  )*}void AndExpression() :{}{  CompareExpression()  (    "&&" CompareExpression()  )*}void CompareExpression() :{}{  PlusExpression()  (    (      "<"    | ">"    )    PlusExpression()  )*}void PlusExpression() :{}{  TimesExpression()  (    (      "+"    | "-"    )    TimesExpression()  )*}void TimesExpression() :{}{  (    LOOKAHEAD(PrimaryExpression() "[")    ArrayLookup()  |     LOOKAHEAD(PrimaryExpression() "." "length")    ArrayLength()  |     LOOKAHEAD(PrimaryExpression() "." Identifier() "(")    MessageSend()  |     PrimaryExpression()  )  (    (      "*"    | "/"    )    (      LOOKAHEAD(PrimaryExpression() "[")      ArrayLookup()    |       LOOKAHEAD(PrimaryExpression() "." "length")      ArrayLength()    |       LOOKAHEAD(PrimaryExpression() "." Identifier() "(")      MessageSend()    |       PrimaryExpression()    )  )*}void ArrayLookup() :{}{  PrimaryExpression() ("[" Expression() "]")+}void ArrayLength() :{}{  PrimaryExpression() ("." "length")+}void MessageSend() :{}{  PrimaryExpression() ("." Identifier()   "("  (    ExpressionList()  )?  ")")+}void ExpressionList() :{}{  Expression()  (    ExpressionRest()  )*}void ExpressionRest() :{}{  "," Expression()}void PrimaryExpression() :{}{  LongLiteral()|   IntegerLiteral()|   TrueLiteral()|   FalseLiteral()|   Identifier()|   ThisExpression()|   LOOKAHEAD(3)  ArrayAllocationExpression()|   AllocationExpression()|   NotExpression()|   BracketExpression()}void LongLiteral() :{}{  < LONG_LITERAL >}void IntegerLiteral() :{}{  < INTEGER_LITERAL >}void TrueLiteral() :{}{  "true"}void FalseLiteral() :{}{  "false"}void Identifier() :{  Token t;}{  t = < IDENTIFIER >  {    System.out.println(t.image);    if (record.containsKey(t.image))    {      Integer temp = record.get(t.image);      record.put(t.image, temp + 1);    }    else     record.put(t.image, 1);  }}void ThisExpression() :{}{  "this"}void ArrayAllocationExpression() :{}{  LOOKAHEAD(2)  (    "new" "int" "[" Expression() "]"  )|   LOOKAHEAD(2)  (    "new" "long" "[" Expression() "]"  )}void AllocationExpression() :{}{  "new" Identifier() "(" ")"}void NotExpression() :{}{  "!" Expression()}void BracketExpression() :{}{  "(" Expression() ")"}
