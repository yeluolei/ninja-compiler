package com.compiler;

import javax.swing.tree.DefaultMutableTreeNode;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected eg2 parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(eg2 p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return eg2TreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public String dump(String prefix) {
		String name = toString(prefix);
		String temp = "";
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					temp = temp + n.dump(prefix + "|");
				}
			}
		}
		return name + '\n' + temp;
  }
	public int weigth() {
		int weigth = 0;
		int childrenWeight = 0;
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					childrenWeight += n.weigth();
				}
			}
		} else {
			if (id == 17)
				return 1;
			else
				return 0;
		}
		switch (id) {
		case 5:
		case 20:
			return 1 + childrenWeight;
		case 21:
			return 1 + childrenWeight;
		case 22:
			return childrenWeight * 2;
		case 23:
			return childrenWeight * 4;
		case 24:
			return 1 + childrenWeight;
		default:
			return childrenWeight;
		}
	}

	public DefaultMutableTreeNode GenerateSyntaxTree() {
		DefaultMutableTreeNode jTreenode = new DefaultMutableTreeNode(
				toString());
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {

					DefaultMutableTreeNode temp = n.GenerateSyntaxTree();
					if (children.length > 1) {
						jTreenode.add(temp);
					} else
						jTreenode = temp;

				}
			}
		}
		return jTreenode;
	}
}

/* JavaCC - OriginalChecksum=c35088c4d417b96d4fa0718fec5f291a (do not edit this line) */
